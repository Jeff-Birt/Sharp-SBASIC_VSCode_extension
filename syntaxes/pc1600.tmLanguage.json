{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "PC1600_Basic",
    "patterns": [
        {
            "include": "#directive_strings"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [{
                    "name": "keyword.control.pc1600",
                    "match": "(?i:\\b(ABS|ACS|AREAD|ARUN|ASC|ASN|ATN|BEEP|BREAK|XCALL|CHAIN|CHR$|CLEAR|CLOAD|CLS|COM$|CONSOLE|CONT|COLOR|COS|CSAVE|CSIZE|CURSOR|DATA|DEG|DEGREE|DEV$|DIM|DMS|DTE|END|ERL|ERN|ERROR|EXP|FEED|FOR|GCURSOR|GLCURSOR|GOSUB|GOTO|GPRINT|GRAD|GRAPH|IF|INKEY$|INPUT|INSTAT|INT|TAB|LEFT$|LEN|LET|LF|LLINE|LIST|LLIST|LN|LOCK|LOG|LPRINT|MEM|MERGE|MID$|NEW|NEXT|OFF|ON|OPN|OUTSTAT|PAUSE|XPEEK|XPEEK#|PI|POINT|XPOKE|#POKE#|PRINT|RADIAN|RANDOM|READ|REM|RESTORE|RETURN|RIGHT$|RINKEY$|RLINE|RMT|RND|ROTATE|RUN|SETCOM|SETDEV|SGN|SIN|SORGN|SPACE$|SQR|STATUS|STEP|STOP|STR$|TAB|TAN|TERMINAL|TEST|TEXT|THEN|TIME|TO|TRANSMIT|TROFF|TRON|UNLOCK|USING|VAL|WAIT|ZONE)\\b)"
                },
                {
                    "name": "keyword.operator.logical.pc1600",
                    "match": "(?i:\\b(AND|NOT|OR)\\b)"
                },
                {
                    "name": "comment.line.pc1600",
                    "match": "(?i:(\\bREM\\b|').*)"
                },
                {
                    "name": "variable.name.pc1600",
                    "match": "\\b[A-Za-z_](\\$|[A-Za-z0-9_]*)"
                },
                {
                    "name": "constant.numeric.pc1600",
                    "match": "-?\\b((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?|(\\$[a-zA-Z0-9]+)|(@[0|1]+)\\b"
                },
                {
                    "name": "keyword.operator.arithmetic.pc1600",
                    "match": "(&|\\*|\\-|\\+|=|<>|<|>|~)"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.pc1600",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.pc1600",
                    "match": "\\\\."
                }
            ]
        },
        "directive_strings": {
            "patterns": [
                {
                    "name": "string.quoted.other.pc1600",
                    "match": "\\s[<][a-zA-Z\\.]*[>]\\s"
                }
            ]
        }
    },
    "scopeName": "source.pc1600"
}